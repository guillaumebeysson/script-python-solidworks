import fitz
import os
import tkinter as tk
from tkinter import messagebox
import sys

# Dossier contenant les PDFs
DOSSIER_PDF = os.path.dirname(os.path.abspath(__file__))
DOSSIER_SORTIE = os.path.join(DOSSIER_PDF, "MODIFIES")

# Cr√©e un dossier de sortie s'il n'existe pas
os.makedirs(DOSSIER_SORTIE, exist_ok=True)

# Texte √† supprimer
TEXTE_A_SUPPRIMER = "Produit d'√©ducation SOLIDWORKS ‚Äì A titre √©ducatif uniquement."

# D√©calage pour abaisser la zone de suppression
DECALAGE_Y = 2.5  # D√©calage vertical vers le bas
DECALAGE_X = 1.75  # D√©calage horizontal

# Listes pour stocker les fichiers modifi√©s et ceux en erreur
fichiers_modifies = []
fichiers_erreurs = []

# Liste des fichiers PDF
pdf_files = [f for f in os.listdir(DOSSIER_PDF) if f.endswith(".pdf")]

# V√©rifier s'il y a des fichiers PDF √† traiter
if not pdf_files:
    print("‚ùå Aucun fichier PDF trouv√© dans le dossier.")
    messagebox.showerror("Erreur", "Aucun fichier PDF trouv√© dans le dossier.")
    sys.exit(0)  # Quitter imm√©diatement

print("\nüîç D√©but du traitement des fichiers PDF...\n")

# Traitement de chaque PDF dans le dossier
for fichier in pdf_files:
    chemin_pdf = os.path.join(DOSSIER_PDF, fichier)
    chemin_pdf_modifie = os.path.join(DOSSIER_SORTIE, fichier)

    print(f"üìÑ Analyse du fichier : {fichier}")

    try:
        # Ouvrir le PDF
        doc = fitz.open(chemin_pdf)
        modifie = False  # Indicateur de modification

        for page in doc:
            # Obtenir tous les blocs de texte
            blocs = page.get_text("blocks")

            for bloc in blocs:
                x0, y0, x1, y1, texte, *_ = bloc  # R√©cup√©rer coordonn√©es et texte

                # Ajustement des coordonn√©es pour d√©placer la suppression
                new_x0 = x0 - DECALAGE_X
                new_y0 = y0 + DECALAGE_Y
                new_x1 = x1 - DECALAGE_X
                new_y1 = y1 + DECALAGE_Y

                if TEXTE_A_SUPPRIMER in texte:
                    modifie = True
                    print(f"   - Suppression de la mention sur la page {page.number+1}")
                    # Supprimer uniquement le bloc ajust√©
                    page.add_redact_annot((new_x0, new_y0, new_x1, new_y1), fill=None)
                    page.apply_redactions()

        if modifie:
            # Sauvegarde du fichier modifi√©
            doc.save(chemin_pdf_modifie)
            fichiers_modifies.append(fichier)
            print(f"‚úîÔ∏è {fichier} a √©t√© modifi√© avec succ√®s.")
            print(f"--------------------------------------------")
        else:
            fichiers_erreurs.append(fichier)
            print(f"‚ùå {fichier} n'a pas √©t√© modifi√© (mention non trouv√©e).")
            print(f"--------------------------------------------")

        doc.close()

    except Exception as e:
        fichiers_erreurs.append(f"{fichier} (Erreur : {str(e)})")
        print(f"‚ùå Erreur lors du traitement de {fichier} : {str(e)}")
        print(f"--------------------------------------------")

print("\n‚úÖ Tous les fichiers ont √©t√© analys√©s.\n")

# G√©n√©rer le message final avec les ic√¥nes
message = ""
for fichier in fichiers_modifies:
    message += f"‚úîÔ∏è {fichier} a √©t√© modifi√© avec succ√®s.\n"
for fichier in fichiers_erreurs:
    message += f"‚ùå {fichier} n'a pas pu √™tre modifi√©.\n"

# Fonction pour fermer la console apr√®s la bo√Æte de dialogue
def fermer_console():
    root.quit()
    root.destroy()
    os._exit(0)  # Force la fermeture imm√©diate de la console

# Cr√©ation de la fen√™tre Tkinter
root = tk.Tk()
root.withdraw()  # Cacher la fen√™tre principale

# Afficher une bo√Æte de dialogue avec les r√©sultats
messagebox.showinfo("Modification des PDFs", message)

# Fermer proprement Tkinter et la console apr√®s le clic sur OK
fermer_console()
